-- M√≥dulo de Configura√ß√µes para Yzz1Hub
local settings = {}

-- Servi√ßos do Roblox
local HttpService = game:GetService("HttpService")

-- Depend√™ncias
local utils -- Ser√° definido na inicializa√ß√£o

-- Pastas e arquivos
local SETTINGS_FOLDER = "MacroAnimeLastStand_Yzz1Hub"
local SETTINGS_FILE = "settings.json"

-- Configura√ß√£o padr√£o
settings.default = {
    -- Interface
    theme = "Dark",
    logLimit = 100,
    
    -- Auto farm
    autoPlace = false,
    autoUpgrade = false,
    autoSell = false,
    selectedUnit = "",
    
    -- Macros
    disableConfirmation = false,
    autoSaveMacros = true,
    
    -- Outros
    webhookUrl = "",
    notifications = true
}

-- Configura√ß√µes atuais
settings.current = {}

-- Inicializa o m√≥dulo
function settings.initialize(utilsModule)
    utils = utilsModule
    
    -- Criar pasta se n√£o existir
    if not isfolder(SETTINGS_FOLDER) then
        makefolder(SETTINGS_FOLDER)
    end
    
    -- Carregar configura√ß√µes ou usar padr√£o
    settings.load()
end

-- Salva as configura√ß√µes
function settings.save()
    local success, errorMsg = pcall(function()
        local json = HttpService:JSONEncode(settings.current)
        writefile(SETTINGS_FOLDER .. "/" .. SETTINGS_FILE, json)
    end)
    
    if success then
        if utils then
            utils.addLogMessage("‚úÖ Configura√ß√µes salvas com sucesso!")
        end
        return true
    else
        if utils then
            utils.addLogMessage("‚ùå Erro ao salvar configura√ß√µes: " .. tostring(errorMsg))
        end
        return false
    end
end

-- Carrega as configura√ß√µes
function settings.load()
    -- Verificar se o arquivo existe
    if not isfile(SETTINGS_FOLDER .. "/" .. SETTINGS_FILE) then
        settings.current = table.clone(settings.default)
        settings.save()
        return settings.current
    end
    
    -- Tentar carregar o arquivo
    local success, result = pcall(function()
        local json = readfile(SETTINGS_FOLDER .. "/" .. SETTINGS_FILE)
        return HttpService:JSONDecode(json)
    end)
    
    if success then
        -- Mesclar as configura√ß√µes carregadas com as padr√µes
        settings.current = settings.mergeSettings(settings.default, result)
        if utils then
            utils.addLogMessage("‚úÖ Configura√ß√µes carregadas com sucesso!")
        end
    else
        -- Usar configura√ß√µes padr√£o em caso de erro
        settings.current = table.clone(settings.default)
        if utils then
            utils.addLogMessage("‚ùå Erro ao carregar configura√ß√µes. Usando padr√µes.")
        end
    end
    
    return settings.current
end

-- Mescla as configura√ß√µes, garantindo que todos os campos padr√£o existam
function settings.mergeSettings(default, loaded)
    local merged = {}
    
    -- Copiar valores padr√£o
    for key, value in pairs(default) do
        merged[key] = value
    end
    
    -- Sobrescrever com valores carregados
    for key, value in pairs(loaded) do
        if default[key] ~= nil then -- Verificar se a chave existe no padr√£o
            merged[key] = value
        end
    end
    
    return merged
end

-- Obt√©m uma configura√ß√£o espec√≠fica
function settings.get(key)
    return settings.current[key]
end

-- Define uma configura√ß√£o espec√≠fica
function settings.set(key, value)
    if settings.current[key] ~= value then
        settings.current[key] = value
        settings.save()
    end
end

-- Reseta as configura√ß√µes para o padr√£o
function settings.reset()
    settings.current = table.clone(settings.default)
    settings.save()
    if utils then
        utils.addLogMessage("‚ö†Ô∏è Configura√ß√µes resetadas para o padr√£o")
    end
end

-- Exporta as configura√ß√µes para compartilhar
function settings.export()
    local success, result = pcall(function()
        return HttpService:JSONEncode(settings.current)
    end)
    
    if success then
        -- Copiar para a √°rea de transfer√™ncia se poss√≠vel
        if setclipboard then
            setclipboard(result)
            if utils then
                utils.addLogMessage("üìã Configura√ß√µes copiadas para a √°rea de transfer√™ncia")
            end
        end
        
        return result
    else
        if utils then
            utils.addLogMessage("‚ùå Erro ao exportar configura√ß√µes")
        end
        return nil
    end
end

-- Importa configura√ß√µes de um JSON
function settings.import(json)
    if not json or type(json) ~= "string" then
        if utils then
            utils.addLogMessage("‚ùå Formato de configura√ß√£o inv√°lido")
        end
        return false
    end
    
    local success, result = pcall(function()
        return HttpService:JSONDecode(json)
    end)
    
    if success and type(result) == "table" then
        settings.current = settings.mergeSettings(settings.default, result)
        settings.save()
        if utils then
            utils.addLogMessage("‚úÖ Configura√ß√µes importadas com sucesso")
        end
        return true
    else
        if utils then
            utils.addLogMessage("‚ùå Erro ao importar configura√ß√µes: Formato inv√°lido")
        end
        return false
    end
end

return settings 